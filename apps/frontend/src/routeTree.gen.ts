/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/auth'
import { Route as PrivateRoutesImport } from './routes/_private-routes'
import { Route as PrivateRoutesLayoutImport } from './routes/_private-routes/_layout'
import { Route as PrivateRoutesLayoutIndexImport } from './routes/_private-routes/_layout/index'
import { Route as PrivateRoutesLayoutTodoTodoidImport } from './routes/_private-routes/_layout/todo/$todoid'

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const PrivateRoutesRoute = PrivateRoutesImport.update({
  id: '/_private-routes',
  getParentRoute: () => rootRoute,
} as any)

const PrivateRoutesLayoutRoute = PrivateRoutesLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => PrivateRoutesRoute,
} as any)

const PrivateRoutesLayoutIndexRoute = PrivateRoutesLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PrivateRoutesLayoutRoute,
} as any)

const PrivateRoutesLayoutTodoTodoidRoute =
  PrivateRoutesLayoutTodoTodoidImport.update({
    id: '/todo/$todoid',
    path: '/todo/$todoid',
    getParentRoute: () => PrivateRoutesLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_private-routes': {
      id: '/_private-routes'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateRoutesImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_private-routes/_layout': {
      id: '/_private-routes/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateRoutesLayoutImport
      parentRoute: typeof PrivateRoutesImport
    }
    '/_private-routes/_layout/': {
      id: '/_private-routes/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PrivateRoutesLayoutIndexImport
      parentRoute: typeof PrivateRoutesLayoutImport
    }
    '/_private-routes/_layout/todo/$todoid': {
      id: '/_private-routes/_layout/todo/$todoid'
      path: '/todo/$todoid'
      fullPath: '/todo/$todoid'
      preLoaderRoute: typeof PrivateRoutesLayoutTodoTodoidImport
      parentRoute: typeof PrivateRoutesLayoutImport
    }
  }
}

// Create and export the route tree

interface PrivateRoutesLayoutRouteChildren {
  PrivateRoutesLayoutIndexRoute: typeof PrivateRoutesLayoutIndexRoute
  PrivateRoutesLayoutTodoTodoidRoute: typeof PrivateRoutesLayoutTodoTodoidRoute
}

const PrivateRoutesLayoutRouteChildren: PrivateRoutesLayoutRouteChildren = {
  PrivateRoutesLayoutIndexRoute: PrivateRoutesLayoutIndexRoute,
  PrivateRoutesLayoutTodoTodoidRoute: PrivateRoutesLayoutTodoTodoidRoute,
}

const PrivateRoutesLayoutRouteWithChildren =
  PrivateRoutesLayoutRoute._addFileChildren(PrivateRoutesLayoutRouteChildren)

interface PrivateRoutesRouteChildren {
  PrivateRoutesLayoutRoute: typeof PrivateRoutesLayoutRouteWithChildren
}

const PrivateRoutesRouteChildren: PrivateRoutesRouteChildren = {
  PrivateRoutesLayoutRoute: PrivateRoutesLayoutRouteWithChildren,
}

const PrivateRoutesRouteWithChildren = PrivateRoutesRoute._addFileChildren(
  PrivateRoutesRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof PrivateRoutesLayoutRouteWithChildren
  '/auth': typeof AuthRoute
  '/': typeof PrivateRoutesLayoutIndexRoute
  '/todo/$todoid': typeof PrivateRoutesLayoutTodoTodoidRoute
}

export interface FileRoutesByTo {
  '': typeof PrivateRoutesRouteWithChildren
  '/auth': typeof AuthRoute
  '/': typeof PrivateRoutesLayoutIndexRoute
  '/todo/$todoid': typeof PrivateRoutesLayoutTodoTodoidRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_private-routes': typeof PrivateRoutesRouteWithChildren
  '/auth': typeof AuthRoute
  '/_private-routes/_layout': typeof PrivateRoutesLayoutRouteWithChildren
  '/_private-routes/_layout/': typeof PrivateRoutesLayoutIndexRoute
  '/_private-routes/_layout/todo/$todoid': typeof PrivateRoutesLayoutTodoTodoidRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/auth' | '/' | '/todo/$todoid'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/auth' | '/' | '/todo/$todoid'
  id:
    | '__root__'
    | '/_private-routes'
    | '/auth'
    | '/_private-routes/_layout'
    | '/_private-routes/_layout/'
    | '/_private-routes/_layout/todo/$todoid'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PrivateRoutesRoute: typeof PrivateRoutesRouteWithChildren
  AuthRoute: typeof AuthRoute
}

const rootRouteChildren: RootRouteChildren = {
  PrivateRoutesRoute: PrivateRoutesRouteWithChildren,
  AuthRoute: AuthRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_private-routes",
        "/auth"
      ]
    },
    "/_private-routes": {
      "filePath": "_private-routes.tsx",
      "children": [
        "/_private-routes/_layout"
      ]
    },
    "/auth": {
      "filePath": "auth.tsx"
    },
    "/_private-routes/_layout": {
      "filePath": "_private-routes/_layout.tsx",
      "parent": "/_private-routes",
      "children": [
        "/_private-routes/_layout/",
        "/_private-routes/_layout/todo/$todoid"
      ]
    },
    "/_private-routes/_layout/": {
      "filePath": "_private-routes/_layout/index.tsx",
      "parent": "/_private-routes/_layout"
    },
    "/_private-routes/_layout/todo/$todoid": {
      "filePath": "_private-routes/_layout/todo/$todoid.tsx",
      "parent": "/_private-routes/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
